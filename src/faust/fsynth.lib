declare author "James Dooley: info@formuls.co.uk";
declare copyright "James Dooley";
declare version "1.0";
declare license "MIT";
declare options "[osc:on]";

import("stdfaust.lib");
fo = library("formuls.lib");

//----------------------------------------------------------------------------------------//
//-------------------------------------SYNTH----------------------------------------------//
//----------------------------------------------------------------------------------------//
//------FORMULS------//
/* main synth function */
// Two audio signals in: 1st is sent to ADSR to trigger it; 2nd receives from another synth and controls FM modulation
synth(inmod,tempo,sigtrig) = inmod : *(extmod) <: (_ : fo.fmosc(oxO,orx,otx,op2freq,op2depth,nx,waveshape,t) : *(velocity)), (par(i,15,(_ : fo.fmosc(ox(i,c,t),orx,otx,o2fx(i,c,t),o2dx(i,c,t),nx,wx(i,c,t),tx(i,c,c2)) : fo.adsr(attack,decay,sustain,release,tx(i,c,c2)) : *(vx(i,c,t))) : *(poly(i,c))) :> _) : ba.selectn(2,adsron)
with{
  //-----------COUNTER/VOICE_SELECT------------//
  /* i = index/instance, c = current counter index, c2 = next counter index, t = trigger */
  /* fmosc controls */
  adsron = hslider("adsron",0,0,1,1) : int; // toggle between polyphonic adsr and monophone sustained oscillator tone.
  // polyphonic(tri) = checkbox("polyphonic") : vbargraph("polyphonicO",0,1) : ba.sAndH(tri) : int;
  polyphonic = checkbox("polyphonic") : vbargraph("polyphonicO",0,1) : int;
  poly(i,x) = polyphonic +(i==x) : min(1);

  // st = (sigtrig : an.ms_envelope_rect(0.01) : >(thresh)) : *(thresh!=1): ba.impulsify : int;
  st = (sigtrig : si.smoo: >(thresh)) : *(thresh!=1): ba.impulsify : int;
  // thresh = hslider("threshold",1,0,1,0.01) : fo.chaos(thchaos,16,thchaostrig,t) : vbargraph("thresholdO",0,1) : pow(6); // sets ADSR trigger threshold for incomgin signal
  thresh = hslider("threshold",1,0,1,0.01) : vbargraph("thresholdO",0,1) : pow(6); // sets ADSR trigger threshold for incomgin signal
  thchaos = hslider("thchaos",0,0,1,0.01) : pow(3);
  thchaostrig = hslider("thchaostrig",0,0,1,1);
  trigx = button("triggerx");
  t = trigx : +(st) : min(1) : int; // triggers synth voice

  //Counter to select voice
  // counterMod = 1,15 : ba.selectn(2,polyphonic);
  counterMod = 15;
  tx(i,x,y) = int((i==x) | (i!=y)); // oscillator trigger
  c = +(1)~(ba.sAndH(t : ba.impulsify)) : %(counterMod) : vbargraph("voicenumberO",0,16) : int; // Incremental counter for voice select.
  c2 = c +(1) : %(counterMod) : int; // Used to turn off next voice in preparation for triggering.

  //----SYNTH_PARAMETERS----//

  // extmod: external input modulates frequency of Oscillator.
  extmod = hslider("extmodulation",0,0,1,0.01) : fo.automrec(_,tempo,extrecord,extloop,t,extact) : fo.chaos(extchaos,1,extchaostrig,t) : vbargraph("extmodulationO",0,1) : *(16) : si.smoo; // amount of noise to add to carrier frequency
  extrecord = checkbox("extrecord");
  extloop = checkbox("extloop");
  extact = checkbox("extact");
  extchaos = hslider("extchaos",0,0,1,0.01);
  // extchaostrig = hslider("extchaostrig",0,0,1,1);
  extchaostrig = checkbox("extchaostrig");

  // waveshape: sine -> triangle -> rising sawtooth -> squarewave
  waveshape = hslider("waveshape",0,0,1,0.01) : fo.automrec(_,tempo,wrecord,wloop,t,wact) : fo.chaos(wchaos,2,wchaostrig,t) : vbargraph("waveshapeO",0,1) : *(3); // choose between sine and sawtooth
  wrecord = checkbox("wrecord"); // activates fo.automrec recording
  wloop = checkbox("wloop"); // activates fo.automrec read looping
  wact = checkbox("wact"); // switches fo.automrec on and off
  wchaos = hslider("wchaos",0,0,1,0.01) : pow(3);
  wchaostrig = hslider("wchaostrig",0,0,1,1);
  wx(i,x,y) = waveshape : ba.sAndH((i==x) & (i!=y)); // function to decide whether message should be sent to a specific voice (see i,c,c2 & t definitions above)

  op1freq = hslider("op1freq",440,0,22050,0.001) : vbargraph("op1freqO",0,22050); // carrier frequency
  op1frecord = checkbox("op1frecord");
  op1floop = checkbox("op1floop");
  op1fact = checkbox("op1fact");
  // op1fchaos = hslider("op1fchaos",0,0,1,0.01) : pow(2.7);
  oxO = op1freq;
  ox(i,x,y) = oxO : ba.sAndH((i==x) & (y==1) : ba.impulsify);

  op1sliderange = hslider("op1sliderange",0,0,1,0.001) : fo.automrec(_,tempo,op1srrecord,op1srloop,t,op1sract) : fo.chaos(op1srchaos,4,op1srchaostrig,t) : vbargraph("op1sliderangeO",0,1) : *(5); //upper frequency for carrier to "slide" down from
  op1srrecord = checkbox("op1srrecord");
  op1srloop = checkbox("op1srloop");
  op1sract = checkbox("op1sract");
  op1srchaos = hslider("op1srchaos",0,0,1,0.01);
  op1srchaostrig = hslider("op1srchaostrig",0,0,1,1);
  orx = op1sliderange;
  // orx(i,x,y) = op1sliderange : ba.sAndH((i==x) & (y == 1) : ba.impulsify);

  op1slidetime = hslider("op1slidetime",0,0,1,0.001) : fo.automrec(_,tempo,op1strecord,op1stloop,t,op1stact) : fo.chaos(op1stchaos,5,op1stchaostrig,t) : vbargraph("op1slidetimeO",0,1) : pow(2.7) : *(2); // time taken for carrier frequency slide
  op1strecord = checkbox("op1strecord");
  op1stloop = checkbox("op1stloop");
  op1stact = checkbox("op1stact");
  op1stchaos = hslider("op1stchaos",0,0,1,0.01);
  op1stchaostrig = hslider("op1stchaostrig",0,0,1,1);
  otx = op1slidetime;
  // otx(i,x,y) = op1slidetime : ba.sAndH((i==x) & (y == 1) : ba.impulsify);

  op2freq = hslider("op2freq",0,0,1,0.001) : fo.automrec(_,tempo,op2frecord,op2floop,t,op2fact)  : fo.chaos(op2fchaos,6,op2fchaostrig,t) : vbargraph("op2freqO",0,1) : *(2) : max(0.001); // mod freq is relative to op1 freq
  op2frecord = checkbox("op2frecord");
  op2floop = checkbox("op2floop");
  op2fact = checkbox("op2fact");
  op2fchaos = hslider("op2fchaos",0,0,1,0.01) : pow(2.7);
  op2fchaostrig = hslider("op2fchaostrig",0,0,1,1);
  // o2fx(i,x,y) = op2freq : ba.sAndH((i==x) & (i!=y));
  o2fx(i,x,y) = op2freq : ba.sAndH((i==x));

  op2depth = hslider("op2depth",0,0,1,0.001) : fo.automrec(_,tempo,op2drecord,op2dloop,t,op2dact) : fo.chaos(op2dchaos,7,op2dchaostrig,t) : vbargraph("op2depthO",0,1) : *(2);// mod depth is relative to op1 freq
  // o2out = op2depth;
  op2drecord = checkbox("op2drecord");
  op2dloop = checkbox("op2dloop");
  op2dact = checkbox("op2dact");
  op2dchaos = hslider("op2dchaos",0,0,1,0.01) : pow(2.7);
  op2dchaostrig = hslider("op2dchaostrig",0,0,1,1);
  // o2dx(i,x,y) = op2depth : ba.sAndH((i==x) & (i!=y));
  o2dx(i,x,y) = op2depth : ba.sAndH((i==x));

  noise = hslider("noise",0,0,1,1) : fo.automrec(_,tempo,nrecord,nloop,t,nact)  : fo.chaos(nchaos,8,nchaostrig,t) : vbargraph("noiseO",0,1) : pow(4.2) : *(22050) : *(no.noise) : fi.lowpass(2,noisefilterfreq); // amount of noise to add to carrier frequency
  nrecord = checkbox("nrecord");
  nloop = checkbox("nloop");
  nact = checkbox("nact");
  nchaos = hslider("nchaos",0,0,1,0.01) : pow(2.7);
  nchaostrig = hslider("nchaostrig",0,0,1,1);
  nx = noise;

  noisefilterfreq = hslider("noisefilterfreq",0,0,1,0.001) : fo.automrec(_,tempo,nfrecord,nfloop,t,nfact) : fo.chaos(nfchaos,9,nfchaostrig,t) : vbargraph("noisefilterfreqO",0,1) : pow(4.2) : *(0.999) : +(0.001) : *(22050); // noise filter amount
  nfrecord = checkbox("nfrecord");
  nfloop = checkbox("nfloop");
  nfact = checkbox("nfact");
  nfchaos = hslider("nfchaos",0,0,1,0.01) : pow(2.7);
  nfchaostrig = hslider("nfchaostrig",0,0,1,1);

  /* ADSR controls */
  attack = hslider("attack",0,0,1,0.001) : fo.automrec(_,tempo,arecord,aloop,t,aact)  : fo.chaos(achaos,10,achaostrig,t) : vbargraph("attackO",0,1) : pow(3.1) : *(0.9999) : +(0.0001) : *(10);
  arecord = checkbox("arecord");
  aloop = checkbox("aloop");
  aact = checkbox("aact");
  achaos = hslider("achaos",0,0,1,0.01);
  achaostrig = hslider("achaostrig",0,0,1,1);

  decay = hslider("decay",0,0,1,0.001) : fo.automrec(_,tempo,drecord,dloop,t,dact)  : fo.chaos(dchaos,11,dchaostrig,t) : vbargraph("decayO",0,1) : pow(3.1) : *(0.9999) : +(0.0001) : *(10);
  drecord = checkbox("drecord");
  dloop = checkbox("dloop");
  dact = checkbox("dact");
  dchaos = hslider("dchaos",0,0,1,0.01);
  dchaostrig = hslider("dchaostrig",0,0,1,1);

  sustain = hslider("sustain",1,0,1,0.01) : fo.automrec(_,tempo,srecord,sloop,t,sact)  : fo.chaos(schaos,12,schaostrig,t) : vbargraph("sustainO",0,1);
  srecord = checkbox("srecord");
  sloop = checkbox("sloop");
  sact = checkbox("sact");
  schaos = hslider("schaos",0,0,1,0.01);
  schaostrig = hslider("schaostrig",0,0,1,1);

  release = hslider("release",0,0,1,0.001) : fo.automrec(_,tempo,rrecord,rloop,t,ract)  : fo.chaos(rchaos,13,rchaostrig,t) : vbargraph("releaseO",0,1) : pow(3.1) : *(0.9999) : +(0.0001) : *(10);
  rrecord = checkbox("rrecord");
  rloop = checkbox("rloop");
  ract = checkbox("ract");
  rchaos = hslider("rchaos",0,0,1,0.01);
  rchaostrig = hslider("rchaostrig",0,0,1,1);

  /* voice velocity/amplitude control. If 'c2', then voice is quietened to prepare for next trigger */
  velocity = hslider("velocity",1,0,1,0.01) : fo.chaos(vchaos,14,vchaostrig,t) : vbargraph("velocityO",0,1) : pow(2.7);
  vchaos = hslider("vchaos",0,0,1,0.01);
  vchaostrig = hslider("vchaostrig",0,0,1,1);
  vx(i,x,y) = velocity : si.smoothAndH((i==x) & (y==1), 0.999);
};
